// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module harris_filter (
        GxxStream_dout,
        GxxStream_empty_n,
        GxxStream_read,
        SxxStream_din,
        SxxStream_full_n,
        SxxStream_write,
        GyyStream_dout,
        GyyStream_empty_n,
        GyyStream_read,
        SyyStream_din,
        SyyStream_full_n,
        SyyStream_write,
        GxyStream_dout,
        GxyStream_empty_n,
        GxyStream_read,
        SxyStream_din,
        SxyStream_full_n,
        SxyStream_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [255:0] GxxStream_dout;
input   GxxStream_empty_n;
output   GxxStream_read;
output  [255:0] SxxStream_din;
input   SxxStream_full_n;
output   SxxStream_write;
input  [255:0] GyyStream_dout;
input   GyyStream_empty_n;
output   GyyStream_read;
output  [255:0] SyyStream_din;
input   SyyStream_full_n;
output   SyyStream_write;
input  [255:0] GxyStream_dout;
input   GxyStream_empty_n;
output   GxyStream_read;
output  [255:0] SxyStream_din;
input   SxyStream_full_n;
output   SxyStream_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    filterSingle_U0_ap_start;
wire    filterSingle_U0_ap_done;
wire    filterSingle_U0_ap_continue;
wire    filterSingle_U0_ap_idle;
wire    filterSingle_U0_ap_ready;
wire    filterSingle_U0_GxxStream_read;
wire   [255:0] filterSingle_U0_SxxStream_din;
wire    filterSingle_U0_SxxStream_write;
wire    ap_sync_continue;
wire    filterSingle_1_U0_ap_start;
wire    filterSingle_1_U0_ap_done;
wire    filterSingle_1_U0_ap_continue;
wire    filterSingle_1_U0_ap_idle;
wire    filterSingle_1_U0_ap_ready;
wire    filterSingle_1_U0_GyyStream_read;
wire   [255:0] filterSingle_1_U0_SyyStream_din;
wire    filterSingle_1_U0_SyyStream_write;
wire    filterSingle_2_U0_ap_start;
wire    filterSingle_2_U0_ap_done;
wire    filterSingle_2_U0_ap_continue;
wire    filterSingle_2_U0_ap_idle;
wire    filterSingle_2_U0_ap_ready;
wire    filterSingle_2_U0_GxyStream_read;
wire   [255:0] filterSingle_2_U0_SxyStream_din;
wire    filterSingle_2_U0_SxyStream_write;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_filterSingle_U0_ap_ready;
wire    ap_sync_filterSingle_U0_ap_ready;
reg    ap_sync_reg_filterSingle_1_U0_ap_ready;
wire    ap_sync_filterSingle_1_U0_ap_ready;
reg    ap_sync_reg_filterSingle_2_U0_ap_ready;
wire    ap_sync_filterSingle_2_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_filterSingle_U0_ap_ready = 1'b0;
#0 ap_sync_reg_filterSingle_1_U0_ap_ready = 1'b0;
#0 ap_sync_reg_filterSingle_2_U0_ap_ready = 1'b0;
end

harris_filterSingle filterSingle_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(filterSingle_U0_ap_start),
    .ap_done(filterSingle_U0_ap_done),
    .ap_continue(filterSingle_U0_ap_continue),
    .ap_idle(filterSingle_U0_ap_idle),
    .ap_ready(filterSingle_U0_ap_ready),
    .GxxStream_dout(GxxStream_dout),
    .GxxStream_num_data_valid(5'd0),
    .GxxStream_fifo_cap(5'd0),
    .GxxStream_empty_n(GxxStream_empty_n),
    .GxxStream_read(filterSingle_U0_GxxStream_read),
    .SxxStream_din(filterSingle_U0_SxxStream_din),
    .SxxStream_num_data_valid(5'd0),
    .SxxStream_fifo_cap(5'd0),
    .SxxStream_full_n(SxxStream_full_n),
    .SxxStream_write(filterSingle_U0_SxxStream_write)
);

harris_filterSingle_1 filterSingle_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(filterSingle_1_U0_ap_start),
    .ap_done(filterSingle_1_U0_ap_done),
    .ap_continue(filterSingle_1_U0_ap_continue),
    .ap_idle(filterSingle_1_U0_ap_idle),
    .ap_ready(filterSingle_1_U0_ap_ready),
    .GyyStream_dout(GyyStream_dout),
    .GyyStream_num_data_valid(5'd0),
    .GyyStream_fifo_cap(5'd0),
    .GyyStream_empty_n(GyyStream_empty_n),
    .GyyStream_read(filterSingle_1_U0_GyyStream_read),
    .SyyStream_din(filterSingle_1_U0_SyyStream_din),
    .SyyStream_num_data_valid(5'd0),
    .SyyStream_fifo_cap(5'd0),
    .SyyStream_full_n(SyyStream_full_n),
    .SyyStream_write(filterSingle_1_U0_SyyStream_write)
);

harris_filterSingle_2 filterSingle_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(filterSingle_2_U0_ap_start),
    .ap_done(filterSingle_2_U0_ap_done),
    .ap_continue(filterSingle_2_U0_ap_continue),
    .ap_idle(filterSingle_2_U0_ap_idle),
    .ap_ready(filterSingle_2_U0_ap_ready),
    .GxyStream_dout(GxyStream_dout),
    .GxyStream_num_data_valid(5'd0),
    .GxyStream_fifo_cap(5'd0),
    .GxyStream_empty_n(GxyStream_empty_n),
    .GxyStream_read(filterSingle_2_U0_GxyStream_read),
    .SxyStream_din(filterSingle_2_U0_SxyStream_din),
    .SxyStream_num_data_valid(5'd0),
    .SxyStream_fifo_cap(5'd0),
    .SxyStream_full_n(SxyStream_full_n),
    .SxyStream_write(filterSingle_2_U0_SxyStream_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_filterSingle_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_filterSingle_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_filterSingle_1_U0_ap_ready <= ap_sync_filterSingle_1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_filterSingle_2_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_filterSingle_2_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_filterSingle_2_U0_ap_ready <= ap_sync_filterSingle_2_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_filterSingle_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_filterSingle_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_filterSingle_U0_ap_ready <= ap_sync_filterSingle_U0_ap_ready;
        end
    end
end

assign GxxStream_read = filterSingle_U0_GxxStream_read;

assign GxyStream_read = filterSingle_2_U0_GxyStream_read;

assign GyyStream_read = filterSingle_1_U0_GyyStream_read;

assign SxxStream_din = filterSingle_U0_SxxStream_din;

assign SxxStream_write = filterSingle_U0_SxxStream_write;

assign SxyStream_din = filterSingle_2_U0_SxyStream_din;

assign SxyStream_write = filterSingle_2_U0_SxyStream_write;

assign SyyStream_din = filterSingle_1_U0_SyyStream_din;

assign SyyStream_write = filterSingle_1_U0_SyyStream_write;

assign ap_done = ap_sync_done;

assign ap_idle = (filterSingle_U0_ap_idle & filterSingle_2_U0_ap_idle & filterSingle_1_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_continue = (ap_sync_done & ap_continue);

assign ap_sync_done = (filterSingle_U0_ap_done & filterSingle_2_U0_ap_done & filterSingle_1_U0_ap_done);

assign ap_sync_filterSingle_1_U0_ap_ready = (filterSingle_1_U0_ap_ready | ap_sync_reg_filterSingle_1_U0_ap_ready);

assign ap_sync_filterSingle_2_U0_ap_ready = (filterSingle_2_U0_ap_ready | ap_sync_reg_filterSingle_2_U0_ap_ready);

assign ap_sync_filterSingle_U0_ap_ready = (filterSingle_U0_ap_ready | ap_sync_reg_filterSingle_U0_ap_ready);

assign ap_sync_ready = (ap_sync_filterSingle_U0_ap_ready & ap_sync_filterSingle_2_U0_ap_ready & ap_sync_filterSingle_1_U0_ap_ready);

assign filterSingle_1_U0_ap_continue = ap_sync_continue;

assign filterSingle_1_U0_ap_start = ((ap_sync_reg_filterSingle_1_U0_ap_ready ^ 1'b1) & ap_start);

assign filterSingle_2_U0_ap_continue = ap_sync_continue;

assign filterSingle_2_U0_ap_start = ((ap_sync_reg_filterSingle_2_U0_ap_ready ^ 1'b1) & ap_start);

assign filterSingle_U0_ap_continue = ap_sync_continue;

assign filterSingle_U0_ap_start = ((ap_sync_reg_filterSingle_U0_ap_ready ^ 1'b1) & ap_start);

endmodule //harris_filter
