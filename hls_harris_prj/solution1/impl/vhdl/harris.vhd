-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity harris is
port (
    imgSrc_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    imgSrc_ce0 : OUT STD_LOGIC;
    imgSrc_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    imgSrc_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    imgSrc_we0 : OUT STD_LOGIC;
    imgSrc_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    imgSrc_ce1 : OUT STD_LOGIC;
    imgSrc_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
    imgSrc_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    imgSrc_we1 : OUT STD_LOGIC;
    imgDst_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    imgDst_ce0 : OUT STD_LOGIC;
    imgDst_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    imgDst_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
    imgDst_we0 : OUT STD_LOGIC;
    imgDst_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    imgDst_ce1 : OUT STD_LOGIC;
    imgDst_d1 : OUT STD_LOGIC_VECTOR (255 downto 0);
    imgDst_q1 : IN STD_LOGIC_VECTOR (255 downto 0);
    imgDst_we1 : OUT STD_LOGIC;
    alpha : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of harris is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "harris_harris,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.371000,HLS_SYN_LAT=2240,HLS_SYN_TPT=2205,HLS_SYN_MEM=245,HLS_SYN_DSP=0,HLS_SYN_FF=55582,HLS_SYN_LUT=18305,HLS_VERSION=2022_1}";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_alpha_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_alpha_c_write : STD_LOGIC;
    signal read_input_U0_ap_start : STD_LOGIC;
    signal read_input_U0_ap_done : STD_LOGIC;
    signal read_input_U0_ap_continue : STD_LOGIC;
    signal read_input_U0_ap_idle : STD_LOGIC;
    signal read_input_U0_ap_ready : STD_LOGIC;
    signal read_input_U0_inStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal read_input_U0_inStream_write : STD_LOGIC;
    signal read_input_U0_start_out : STD_LOGIC;
    signal read_input_U0_start_write : STD_LOGIC;
    signal read_input_U0_imgSrc_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal read_input_U0_imgSrc_ce0 : STD_LOGIC;
    signal sobel_U0_ap_start : STD_LOGIC;
    signal sobel_U0_ap_done : STD_LOGIC;
    signal sobel_U0_ap_continue : STD_LOGIC;
    signal sobel_U0_ap_idle : STD_LOGIC;
    signal sobel_U0_ap_ready : STD_LOGIC;
    signal sobel_U0_inStream_read : STD_LOGIC;
    signal sobel_U0_GxxStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal sobel_U0_GxxStream_write : STD_LOGIC;
    signal sobel_U0_GyyStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal sobel_U0_GyyStream_write : STD_LOGIC;
    signal sobel_U0_GxyStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal sobel_U0_GxyStream_write : STD_LOGIC;
    signal sobel_U0_start_out : STD_LOGIC;
    signal sobel_U0_start_write : STD_LOGIC;
    signal filter_U0_GxxStream_read : STD_LOGIC;
    signal filter_U0_SxxStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal filter_U0_SxxStream_write : STD_LOGIC;
    signal filter_U0_GyyStream_read : STD_LOGIC;
    signal filter_U0_SyyStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal filter_U0_SyyStream_write : STD_LOGIC;
    signal filter_U0_GxyStream_read : STD_LOGIC;
    signal filter_U0_SxyStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal filter_U0_SxyStream_write : STD_LOGIC;
    signal filter_U0_ap_start : STD_LOGIC;
    signal filter_U0_ap_done : STD_LOGIC;
    signal filter_U0_ap_ready : STD_LOGIC;
    signal filter_U0_ap_idle : STD_LOGIC;
    signal filter_U0_ap_continue : STD_LOGIC;
    signal response_U0_ap_start : STD_LOGIC;
    signal response_U0_ap_done : STD_LOGIC;
    signal response_U0_ap_continue : STD_LOGIC;
    signal response_U0_ap_idle : STD_LOGIC;
    signal response_U0_ap_ready : STD_LOGIC;
    signal response_U0_start_out : STD_LOGIC;
    signal response_U0_start_write : STD_LOGIC;
    signal response_U0_alpha_read : STD_LOGIC;
    signal response_U0_SxxStream_read : STD_LOGIC;
    signal response_U0_SyyStream_read : STD_LOGIC;
    signal response_U0_SxyStream_read : STD_LOGIC;
    signal response_U0_RStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal response_U0_RStream_write : STD_LOGIC;
    signal findCorner_U0_ap_start : STD_LOGIC;
    signal findCorner_U0_ap_done : STD_LOGIC;
    signal findCorner_U0_ap_continue : STD_LOGIC;
    signal findCorner_U0_ap_idle : STD_LOGIC;
    signal findCorner_U0_ap_ready : STD_LOGIC;
    signal findCorner_U0_start_out : STD_LOGIC;
    signal findCorner_U0_start_write : STD_LOGIC;
    signal findCorner_U0_RStream_read : STD_LOGIC;
    signal findCorner_U0_outStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal findCorner_U0_outStream_write : STD_LOGIC;
    signal write_result_U0_ap_start : STD_LOGIC;
    signal write_result_U0_ap_done : STD_LOGIC;
    signal write_result_U0_ap_continue : STD_LOGIC;
    signal write_result_U0_ap_idle : STD_LOGIC;
    signal write_result_U0_ap_ready : STD_LOGIC;
    signal write_result_U0_outStream_read : STD_LOGIC;
    signal write_result_U0_imgDst_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal write_result_U0_imgDst_ce0 : STD_LOGIC;
    signal write_result_U0_imgDst_we0 : STD_LOGIC;
    signal write_result_U0_imgDst_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal alpha_c_full_n : STD_LOGIC;
    signal alpha_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal alpha_c_empty_n : STD_LOGIC;
    signal inStream_full_n : STD_LOGIC;
    signal inStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal inStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_empty_n : STD_LOGIC;
    signal GxxStream_full_n : STD_LOGIC;
    signal GxxStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal GxxStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal GxxStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal GxxStream_empty_n : STD_LOGIC;
    signal GyyStream_full_n : STD_LOGIC;
    signal GyyStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal GyyStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal GyyStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal GyyStream_empty_n : STD_LOGIC;
    signal GxyStream_full_n : STD_LOGIC;
    signal GxyStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal GxyStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal GxyStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal GxyStream_empty_n : STD_LOGIC;
    signal SxxStream_full_n : STD_LOGIC;
    signal SxxStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal SxxStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal SxxStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal SxxStream_empty_n : STD_LOGIC;
    signal SyyStream_full_n : STD_LOGIC;
    signal SyyStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal SyyStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal SyyStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal SyyStream_empty_n : STD_LOGIC;
    signal SxyStream_full_n : STD_LOGIC;
    signal SxyStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal SxyStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal SxyStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal SxyStream_empty_n : STD_LOGIC;
    signal RStream_full_n : STD_LOGIC;
    signal RStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal RStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal RStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal RStream_empty_n : STD_LOGIC;
    signal outStream_full_n : STD_LOGIC;
    signal outStream_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal outStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_input_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_input_U0_ap_ready : STD_LOGIC;
    signal start_for_response_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_response_U0_full_n : STD_LOGIC;
    signal start_for_response_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_response_U0_empty_n : STD_LOGIC;
    signal start_for_sobel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_U0_full_n : STD_LOGIC;
    signal start_for_sobel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sobel_U0_empty_n : STD_LOGIC;
    signal start_for_filter_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_filter_U0_full_n : STD_LOGIC;
    signal start_for_filter_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_filter_U0_empty_n : STD_LOGIC;
    signal start_for_findCorner_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_findCorner_U0_full_n : STD_LOGIC;
    signal start_for_findCorner_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_findCorner_U0_empty_n : STD_LOGIC;
    signal start_for_write_result_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_result_U0_full_n : STD_LOGIC;
    signal start_for_write_result_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_result_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component harris_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        alpha : IN STD_LOGIC_VECTOR (63 downto 0);
        alpha_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        alpha_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        alpha_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        alpha_c_full_n : IN STD_LOGIC;
        alpha_c_write : OUT STD_LOGIC );
    end component;


    component harris_read_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        inStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_full_n : IN STD_LOGIC;
        inStream_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        imgSrc_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        imgSrc_ce0 : OUT STD_LOGIC;
        imgSrc_q0 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component harris_sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        inStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_empty_n : IN STD_LOGIC;
        inStream_read : OUT STD_LOGIC;
        GxxStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        GxxStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        GxxStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        GxxStream_full_n : IN STD_LOGIC;
        GxxStream_write : OUT STD_LOGIC;
        GyyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        GyyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        GyyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        GyyStream_full_n : IN STD_LOGIC;
        GyyStream_write : OUT STD_LOGIC;
        GxyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        GxyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        GxyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        GxyStream_full_n : IN STD_LOGIC;
        GxyStream_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component harris_filter IS
    port (
        GxxStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        GxxStream_empty_n : IN STD_LOGIC;
        GxxStream_read : OUT STD_LOGIC;
        SxxStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        SxxStream_full_n : IN STD_LOGIC;
        SxxStream_write : OUT STD_LOGIC;
        GyyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        GyyStream_empty_n : IN STD_LOGIC;
        GyyStream_read : OUT STD_LOGIC;
        SyyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        SyyStream_full_n : IN STD_LOGIC;
        SyyStream_write : OUT STD_LOGIC;
        GxyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        GxyStream_empty_n : IN STD_LOGIC;
        GxyStream_read : OUT STD_LOGIC;
        SxyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        SxyStream_full_n : IN STD_LOGIC;
        SxyStream_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component harris_response IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        alpha_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        alpha_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        alpha_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        alpha_empty_n : IN STD_LOGIC;
        alpha_read : OUT STD_LOGIC;
        SxxStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        SxxStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxxStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxxStream_empty_n : IN STD_LOGIC;
        SxxStream_read : OUT STD_LOGIC;
        SyyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        SyyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SyyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SyyStream_empty_n : IN STD_LOGIC;
        SyyStream_read : OUT STD_LOGIC;
        SxyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        SxyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxyStream_empty_n : IN STD_LOGIC;
        SxyStream_read : OUT STD_LOGIC;
        RStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        RStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        RStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        RStream_full_n : IN STD_LOGIC;
        RStream_write : OUT STD_LOGIC );
    end component;


    component harris_findCorner IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        RStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        RStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        RStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        RStream_empty_n : IN STD_LOGIC;
        RStream_read : OUT STD_LOGIC;
        outStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        outStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        outStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        outStream_full_n : IN STD_LOGIC;
        outStream_write : OUT STD_LOGIC );
    end component;


    component harris_write_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        outStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        outStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        outStream_empty_n : IN STD_LOGIC;
        outStream_read : OUT STD_LOGIC;
        imgDst_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        imgDst_ce0 : OUT STD_LOGIC;
        imgDst_we0 : OUT STD_LOGIC;
        imgDst_d0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component harris_fifo_w64_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component harris_fifo_w256_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component harris_start_for_response_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component harris_start_for_sobel_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component harris_start_for_filter_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component harris_start_for_findCorner_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component harris_start_for_write_result_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component harris_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_response_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        alpha => alpha,
        alpha_c_din => entry_proc_U0_alpha_c_din,
        alpha_c_num_data_valid => alpha_c_num_data_valid,
        alpha_c_fifo_cap => alpha_c_fifo_cap,
        alpha_c_full_n => alpha_c_full_n,
        alpha_c_write => entry_proc_U0_alpha_c_write);

    read_input_U0 : component harris_read_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_input_U0_ap_start,
        start_full_n => start_for_sobel_U0_full_n,
        ap_done => read_input_U0_ap_done,
        ap_continue => read_input_U0_ap_continue,
        ap_idle => read_input_U0_ap_idle,
        ap_ready => read_input_U0_ap_ready,
        inStream_din => read_input_U0_inStream_din,
        inStream_num_data_valid => inStream_num_data_valid,
        inStream_fifo_cap => inStream_fifo_cap,
        inStream_full_n => inStream_full_n,
        inStream_write => read_input_U0_inStream_write,
        start_out => read_input_U0_start_out,
        start_write => read_input_U0_start_write,
        imgSrc_address0 => read_input_U0_imgSrc_address0,
        imgSrc_ce0 => read_input_U0_imgSrc_ce0,
        imgSrc_q0 => imgSrc_q0);

    sobel_U0 : component harris_sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sobel_U0_ap_start,
        start_full_n => start_for_filter_U0_full_n,
        ap_done => sobel_U0_ap_done,
        ap_continue => sobel_U0_ap_continue,
        ap_idle => sobel_U0_ap_idle,
        ap_ready => sobel_U0_ap_ready,
        inStream_dout => inStream_dout,
        inStream_num_data_valid => inStream_num_data_valid,
        inStream_fifo_cap => inStream_fifo_cap,
        inStream_empty_n => inStream_empty_n,
        inStream_read => sobel_U0_inStream_read,
        GxxStream_din => sobel_U0_GxxStream_din,
        GxxStream_num_data_valid => GxxStream_num_data_valid,
        GxxStream_fifo_cap => GxxStream_fifo_cap,
        GxxStream_full_n => GxxStream_full_n,
        GxxStream_write => sobel_U0_GxxStream_write,
        GyyStream_din => sobel_U0_GyyStream_din,
        GyyStream_num_data_valid => GyyStream_num_data_valid,
        GyyStream_fifo_cap => GyyStream_fifo_cap,
        GyyStream_full_n => GyyStream_full_n,
        GyyStream_write => sobel_U0_GyyStream_write,
        GxyStream_din => sobel_U0_GxyStream_din,
        GxyStream_num_data_valid => GxyStream_num_data_valid,
        GxyStream_fifo_cap => GxyStream_fifo_cap,
        GxyStream_full_n => GxyStream_full_n,
        GxyStream_write => sobel_U0_GxyStream_write,
        start_out => sobel_U0_start_out,
        start_write => sobel_U0_start_write);

    filter_U0 : component harris_filter
    port map (
        GxxStream_dout => GxxStream_dout,
        GxxStream_empty_n => GxxStream_empty_n,
        GxxStream_read => filter_U0_GxxStream_read,
        SxxStream_din => filter_U0_SxxStream_din,
        SxxStream_full_n => SxxStream_full_n,
        SxxStream_write => filter_U0_SxxStream_write,
        GyyStream_dout => GyyStream_dout,
        GyyStream_empty_n => GyyStream_empty_n,
        GyyStream_read => filter_U0_GyyStream_read,
        SyyStream_din => filter_U0_SyyStream_din,
        SyyStream_full_n => SyyStream_full_n,
        SyyStream_write => filter_U0_SyyStream_write,
        GxyStream_dout => GxyStream_dout,
        GxyStream_empty_n => GxyStream_empty_n,
        GxyStream_read => filter_U0_GxyStream_read,
        SxyStream_din => filter_U0_SxyStream_din,
        SxyStream_full_n => SxyStream_full_n,
        SxyStream_write => filter_U0_SxyStream_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => filter_U0_ap_start,
        ap_done => filter_U0_ap_done,
        ap_ready => filter_U0_ap_ready,
        ap_idle => filter_U0_ap_idle,
        ap_continue => filter_U0_ap_continue);

    response_U0 : component harris_response
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => response_U0_ap_start,
        start_full_n => start_for_findCorner_U0_full_n,
        ap_done => response_U0_ap_done,
        ap_continue => response_U0_ap_continue,
        ap_idle => response_U0_ap_idle,
        ap_ready => response_U0_ap_ready,
        start_out => response_U0_start_out,
        start_write => response_U0_start_write,
        alpha_dout => alpha_c_dout,
        alpha_num_data_valid => alpha_c_num_data_valid,
        alpha_fifo_cap => alpha_c_fifo_cap,
        alpha_empty_n => alpha_c_empty_n,
        alpha_read => response_U0_alpha_read,
        SxxStream_dout => SxxStream_dout,
        SxxStream_num_data_valid => SxxStream_num_data_valid,
        SxxStream_fifo_cap => SxxStream_fifo_cap,
        SxxStream_empty_n => SxxStream_empty_n,
        SxxStream_read => response_U0_SxxStream_read,
        SyyStream_dout => SyyStream_dout,
        SyyStream_num_data_valid => SyyStream_num_data_valid,
        SyyStream_fifo_cap => SyyStream_fifo_cap,
        SyyStream_empty_n => SyyStream_empty_n,
        SyyStream_read => response_U0_SyyStream_read,
        SxyStream_dout => SxyStream_dout,
        SxyStream_num_data_valid => SxyStream_num_data_valid,
        SxyStream_fifo_cap => SxyStream_fifo_cap,
        SxyStream_empty_n => SxyStream_empty_n,
        SxyStream_read => response_U0_SxyStream_read,
        RStream_din => response_U0_RStream_din,
        RStream_num_data_valid => RStream_num_data_valid,
        RStream_fifo_cap => RStream_fifo_cap,
        RStream_full_n => RStream_full_n,
        RStream_write => response_U0_RStream_write);

    findCorner_U0 : component harris_findCorner
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => findCorner_U0_ap_start,
        start_full_n => start_for_write_result_U0_full_n,
        ap_done => findCorner_U0_ap_done,
        ap_continue => findCorner_U0_ap_continue,
        ap_idle => findCorner_U0_ap_idle,
        ap_ready => findCorner_U0_ap_ready,
        start_out => findCorner_U0_start_out,
        start_write => findCorner_U0_start_write,
        RStream_dout => RStream_dout,
        RStream_num_data_valid => RStream_num_data_valid,
        RStream_fifo_cap => RStream_fifo_cap,
        RStream_empty_n => RStream_empty_n,
        RStream_read => findCorner_U0_RStream_read,
        outStream_din => findCorner_U0_outStream_din,
        outStream_num_data_valid => outStream_num_data_valid,
        outStream_fifo_cap => outStream_fifo_cap,
        outStream_full_n => outStream_full_n,
        outStream_write => findCorner_U0_outStream_write);

    write_result_U0 : component harris_write_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_result_U0_ap_start,
        ap_done => write_result_U0_ap_done,
        ap_continue => write_result_U0_ap_continue,
        ap_idle => write_result_U0_ap_idle,
        ap_ready => write_result_U0_ap_ready,
        outStream_dout => outStream_dout,
        outStream_num_data_valid => outStream_num_data_valid,
        outStream_fifo_cap => outStream_fifo_cap,
        outStream_empty_n => outStream_empty_n,
        outStream_read => write_result_U0_outStream_read,
        imgDst_address0 => write_result_U0_imgDst_address0,
        imgDst_ce0 => write_result_U0_imgDst_ce0,
        imgDst_we0 => write_result_U0_imgDst_we0,
        imgDst_d0 => write_result_U0_imgDst_d0);

    alpha_c_U : component harris_fifo_w64_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_alpha_c_din,
        if_full_n => alpha_c_full_n,
        if_write => entry_proc_U0_alpha_c_write,
        if_dout => alpha_c_dout,
        if_num_data_valid => alpha_c_num_data_valid,
        if_fifo_cap => alpha_c_fifo_cap,
        if_empty_n => alpha_c_empty_n,
        if_read => response_U0_alpha_read);

    inStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_inStream_din,
        if_full_n => inStream_full_n,
        if_write => read_input_U0_inStream_write,
        if_dout => inStream_dout,
        if_num_data_valid => inStream_num_data_valid,
        if_fifo_cap => inStream_fifo_cap,
        if_empty_n => inStream_empty_n,
        if_read => sobel_U0_inStream_read);

    GxxStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_U0_GxxStream_din,
        if_full_n => GxxStream_full_n,
        if_write => sobel_U0_GxxStream_write,
        if_dout => GxxStream_dout,
        if_num_data_valid => GxxStream_num_data_valid,
        if_fifo_cap => GxxStream_fifo_cap,
        if_empty_n => GxxStream_empty_n,
        if_read => filter_U0_GxxStream_read);

    GyyStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_U0_GyyStream_din,
        if_full_n => GyyStream_full_n,
        if_write => sobel_U0_GyyStream_write,
        if_dout => GyyStream_dout,
        if_num_data_valid => GyyStream_num_data_valid,
        if_fifo_cap => GyyStream_fifo_cap,
        if_empty_n => GyyStream_empty_n,
        if_read => filter_U0_GyyStream_read);

    GxyStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_U0_GxyStream_din,
        if_full_n => GxyStream_full_n,
        if_write => sobel_U0_GxyStream_write,
        if_dout => GxyStream_dout,
        if_num_data_valid => GxyStream_num_data_valid,
        if_fifo_cap => GxyStream_fifo_cap,
        if_empty_n => GxyStream_empty_n,
        if_read => filter_U0_GxyStream_read);

    SxxStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => filter_U0_SxxStream_din,
        if_full_n => SxxStream_full_n,
        if_write => filter_U0_SxxStream_write,
        if_dout => SxxStream_dout,
        if_num_data_valid => SxxStream_num_data_valid,
        if_fifo_cap => SxxStream_fifo_cap,
        if_empty_n => SxxStream_empty_n,
        if_read => response_U0_SxxStream_read);

    SyyStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => filter_U0_SyyStream_din,
        if_full_n => SyyStream_full_n,
        if_write => filter_U0_SyyStream_write,
        if_dout => SyyStream_dout,
        if_num_data_valid => SyyStream_num_data_valid,
        if_fifo_cap => SyyStream_fifo_cap,
        if_empty_n => SyyStream_empty_n,
        if_read => response_U0_SyyStream_read);

    SxyStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => filter_U0_SxyStream_din,
        if_full_n => SxyStream_full_n,
        if_write => filter_U0_SxyStream_write,
        if_dout => SxyStream_dout,
        if_num_data_valid => SxyStream_num_data_valid,
        if_fifo_cap => SxyStream_fifo_cap,
        if_empty_n => SxyStream_empty_n,
        if_read => response_U0_SxyStream_read);

    RStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => response_U0_RStream_din,
        if_full_n => RStream_full_n,
        if_write => response_U0_RStream_write,
        if_dout => RStream_dout,
        if_num_data_valid => RStream_num_data_valid,
        if_fifo_cap => RStream_fifo_cap,
        if_empty_n => RStream_empty_n,
        if_read => findCorner_U0_RStream_read);

    outStream_U : component harris_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => findCorner_U0_outStream_din,
        if_full_n => outStream_full_n,
        if_write => findCorner_U0_outStream_write,
        if_dout => outStream_dout,
        if_num_data_valid => outStream_num_data_valid,
        if_fifo_cap => outStream_fifo_cap,
        if_empty_n => outStream_empty_n,
        if_read => write_result_U0_outStream_read);

    start_for_response_U0_U : component harris_start_for_response_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_response_U0_din,
        if_full_n => start_for_response_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_response_U0_dout,
        if_empty_n => start_for_response_U0_empty_n,
        if_read => response_U0_ap_ready);

    start_for_sobel_U0_U : component harris_start_for_sobel_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sobel_U0_din,
        if_full_n => start_for_sobel_U0_full_n,
        if_write => read_input_U0_start_write,
        if_dout => start_for_sobel_U0_dout,
        if_empty_n => start_for_sobel_U0_empty_n,
        if_read => sobel_U0_ap_ready);

    start_for_filter_U0_U : component harris_start_for_filter_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_filter_U0_din,
        if_full_n => start_for_filter_U0_full_n,
        if_write => sobel_U0_start_write,
        if_dout => start_for_filter_U0_dout,
        if_empty_n => start_for_filter_U0_empty_n,
        if_read => filter_U0_ap_ready);

    start_for_findCorner_U0_U : component harris_start_for_findCorner_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_findCorner_U0_din,
        if_full_n => start_for_findCorner_U0_full_n,
        if_write => response_U0_start_write,
        if_dout => start_for_findCorner_U0_dout,
        if_empty_n => start_for_findCorner_U0_empty_n,
        if_read => findCorner_U0_ap_ready);

    start_for_write_result_U0_U : component harris_start_for_write_result_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_result_U0_din,
        if_full_n => start_for_write_result_U0_full_n,
        if_write => findCorner_U0_start_write,
        if_dout => start_for_write_result_U0_dout,
        if_empty_n => start_for_write_result_U0_empty_n,
        if_read => write_result_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_input_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_input_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_input_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_input_U0_ap_ready <= ap_sync_read_input_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= write_result_U0_ap_done;
    ap_idle <= (write_result_U0_ap_idle and sobel_U0_ap_idle and response_U0_ap_idle and read_input_U0_ap_idle and findCorner_U0_ap_idle and filter_U0_ap_idle and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_read_input_U0_ap_ready <= (read_input_U0_ap_ready or ap_sync_reg_read_input_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_input_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    filter_U0_ap_continue <= ap_const_logic_1;
    filter_U0_ap_start <= start_for_filter_U0_empty_n;
    findCorner_U0_ap_continue <= ap_const_logic_1;
    findCorner_U0_ap_start <= start_for_findCorner_U0_empty_n;
    imgDst_address0 <= write_result_U0_imgDst_address0;
    imgDst_address1 <= ap_const_lv11_0;
    imgDst_ce0 <= write_result_U0_imgDst_ce0;
    imgDst_ce1 <= ap_const_logic_0;
    imgDst_d0 <= write_result_U0_imgDst_d0;
    imgDst_d1 <= ap_const_lv256_lc_1;
    imgDst_we0 <= write_result_U0_imgDst_we0;
    imgDst_we1 <= ap_const_logic_0;
    imgSrc_address0 <= read_input_U0_imgSrc_address0;
    imgSrc_address1 <= ap_const_lv11_0;
    imgSrc_ce0 <= read_input_U0_imgSrc_ce0;
    imgSrc_ce1 <= ap_const_logic_0;
    imgSrc_d0 <= ap_const_lv256_lc_1;
    imgSrc_d1 <= ap_const_lv256_lc_1;
    imgSrc_we0 <= ap_const_logic_0;
    imgSrc_we1 <= ap_const_logic_0;
    read_input_U0_ap_continue <= ap_const_logic_1;
    read_input_U0_ap_start <= ((ap_sync_reg_read_input_U0_ap_ready xor ap_const_logic_1) and ap_start);
    response_U0_ap_continue <= ap_const_logic_1;
    response_U0_ap_start <= start_for_response_U0_empty_n;
    sobel_U0_ap_continue <= ap_const_logic_1;
    sobel_U0_ap_start <= start_for_sobel_U0_empty_n;
    start_for_filter_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_findCorner_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_response_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_sobel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_result_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_result_U0_ap_continue <= ap_continue;
    write_result_U0_ap_start <= start_for_write_result_U0_empty_n;
end behav;
