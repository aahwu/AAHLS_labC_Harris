-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity harris_sobel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    inStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_empty_n : IN STD_LOGIC;
    inStream_read : OUT STD_LOGIC;
    GxxStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    GxxStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    GxxStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    GxxStream_full_n : IN STD_LOGIC;
    GxxStream_write : OUT STD_LOGIC;
    GyyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    GyyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    GyyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    GyyStream_full_n : IN STD_LOGIC;
    GyyStream_write : OUT STD_LOGIC;
    GxyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    GxyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    GxyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    GxyStream_full_n : IN STD_LOGIC;
    GxyStream_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of harris_sobel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011110";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111110";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_25E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011110";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_27E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111110";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_29E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011110";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111110";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011110";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111110";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011110";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111110";
    constant ap_const_lv32_5C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111000000";
    constant ap_const_lv32_5DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111011111";
    constant ap_const_lv32_5E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111100000";
    constant ap_const_lv32_5FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111111111";
    constant ap_const_lv32_500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100000000";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal select_ln157_1_reg_1795 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln164_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal GxxStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal GyyStream_blk_n : STD_LOGIC;
    signal GxyStream_blk_n : STD_LOGIC;
    signal inStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln165_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1757_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_fu_332_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln157_reg_1763 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln157_reg_1763_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln157_reg_1763_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln157_reg_1763_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln157_reg_1763_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln165_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln165_reg_1769 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1774 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp22_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp22_reg_1779 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln164_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln164_reg_1784 : STD_LOGIC_VECTOR (7 downto 0);
    signal rowBuffer_addr_reg_1789 : STD_LOGIC_VECTOR (3 downto 0);
    signal rowBuffer_addr_reg_1789_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln157_1_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln157_1_reg_1795_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1799 : STD_LOGIC_VECTOR (255 downto 0);
    signal obj_var_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal obj_var_reg_1804 : STD_LOGIC_VECTOR (31 downto 0);
    signal obj_var_1_reg_1811 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_reg_1818 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_reg_1825 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_1839 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_1852 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_1852_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_1858 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_1865 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_i_reg_1871 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_s_reg_1878 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_i_reg_1884 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i_reg_1884_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_1_reg_1891 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_i_reg_1897 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_reg_1897_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_2_reg_1904 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_i_reg_1910 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_reg_1910_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_3_reg_1917 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_i_reg_1923 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_reg_1923_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_4_reg_1930 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_i_reg_1936 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_reg_1936_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln173_5_reg_1942 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_i_reg_1947 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_reg_1947_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_reg_1947_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_reg_1953 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_24_i_reg_1958 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_25_i_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_i_reg_1969 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_reg_1975 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln54_s_reg_1980 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_29_i_reg_1985 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_reg_1991 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_fu_801_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_reg_1997 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln70_fu_805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_reg_2002 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_fu_809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_reg_2007 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_1_fu_813_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_1_reg_2012 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln70_1_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_1_reg_2017 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_1_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_1_reg_2022 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_2_fu_825_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_2_reg_2027 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln68_2_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_2_reg_2032 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_3_fu_838_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_3_reg_2037 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln68_3_fu_846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_3_reg_2042 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_4_fu_851_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_4_reg_2047 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln68_4_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_4_reg_2052 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_5_fu_864_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_5_reg_2057 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln68_5_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_5_reg_2062 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_6_fu_877_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_6_reg_2067 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln68_6_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_6_reg_2072 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_7_fu_890_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln69_7_reg_2077 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln68_7_fu_898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_7_reg_2082 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln83_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln83_reg_2087 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_fu_907_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_reg_2093 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln82_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln82_reg_2100 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_1_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_1_reg_2105 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_2_fu_919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_2_reg_2112 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_3_fu_923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_3_reg_2119 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_4_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_4_reg_2126 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_5_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_5_reg_2133 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_6_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_6_reg_2140 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_6_reg_2140_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Gx_var_fu_951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gx_var_reg_2146 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gx_var_reg_2146_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Gx_var_1_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gx_var_1_reg_2153 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gx_var_1_reg_2153_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_reg_2160 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_reg_2160_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_1_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_1_reg_2167 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_1_reg_2167_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_2_fu_1019_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_2_reg_2174 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_2_reg_2174_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_3_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_3_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_3_reg_2181_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_4_fu_1053_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_4_reg_2188 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_4_reg_2188_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_5_fu_1070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_5_reg_2195 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_5_reg_2195_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Gy_var_fu_1085_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gy_var_reg_2202 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gy_var_reg_2202_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Gy_var_1_fu_1099_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gy_var_1_reg_2209 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gy_var_1_reg_2209_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_fu_1114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_reg_2216 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_reg_2216_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_1_fu_1129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_1_reg_2223 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_1_reg_2223_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_2_fu_1144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_2_reg_2230 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_2_reg_2230_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_3_fu_1159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_3_reg_2237 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_3_reg_2237_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_4_fu_1174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_4_reg_2244 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_4_reg_2244_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_fu_1180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln84_reg_2251 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_5_fu_1193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_5_reg_2256 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp63_i_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_reg_2263 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_reg_2263_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_reg_2263_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_reg_2263_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_reg_2263_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_reg_2263_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_reg_2273 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln156_1_reg_2278 : STD_LOGIC_VECTOR (25 downto 0);
    signal Gxy_var_reg_2283 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln4_reg_2288 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln206_1_reg_2293 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln206_2_reg_2298 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln206_3_reg_2303 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln206_5_reg_2308 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_reg_2313 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln5_reg_2318 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_1_reg_2323 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_2_reg_2328 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_3_reg_2333 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_4_reg_2338 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_5_reg_2343 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_5_reg_2348 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_7_reg_2353 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_7_reg_2358 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_8_reg_2363 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_9_reg_2368 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_s_reg_2373 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln174_6_reg_2378 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_8_reg_2383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_2388 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_9_reg_2393 : STD_LOGIC_VECTOR (25 downto 0);
    signal rowBuffer_ce0 : STD_LOGIC;
    signal rowBuffer_we0 : STD_LOGIC;
    signal rowBuffer_d0 : STD_LOGIC_VECTOR (767 downto 0);
    signal rowBuffer_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal rowBuffer_ce1 : STD_LOGIC;
    signal rowBuffer_q1 : STD_LOGIC_VECTOR (767 downto 0);
    signal j_cast_i_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_230 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal indvar_flatten_fu_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln164_fu_317_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal windowBuffer_fu_242 : STD_LOGIC_VECTOR (1535 downto 0);
    signal windowBuffer_1_fu_769_p7 : STD_LOGIC_VECTOR (1535 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln164_1_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_360_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_376_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_i_fu_719_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_32_i_fu_729_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_33_i_fu_739_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_34_i_fu_749_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_35_i_fu_759_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal sub_ln70_2_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_3_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_4_fu_855_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_5_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_6_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_7_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_939_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_6_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln69_1_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_8_fu_963_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln69_2_fu_973_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_10_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln69_3_fu_990_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_11_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln69_4_fu_1007_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_12_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln69_5_fu_1024_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_13_fu_1031_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln69_6_fu_1041_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_14_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln69_7_fu_1058_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_15_fu_1065_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_fu_1075_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_6_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_8_fu_1095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_1_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_10_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_2_fu_1105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_11_fu_1125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_3_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_12_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_4_fu_1135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_13_fu_1155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_5_fu_1150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln83_14_fu_1170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_6_fu_1165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln82_1_fu_1189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_7_fu_1184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Gxx_sroa_0_0141_i_fu_1560_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal Gyy_sroa_0_0142_i_fu_1554_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal Gxy_sroa_0_0143_i_fu_1548_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal empty_fu_1578_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln156_fu_1566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1584_p15 : STD_LOGIC_VECTOR (249 downto 0);
    signal empty_34_fu_1615_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln156_1_fu_1570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1621_p15 : STD_LOGIC_VECTOR (249 downto 0);
    signal empty_35_fu_1658_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln156_fu_1574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1664_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal sext_ln174_fu_1652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1676_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal sext_ln174_3_fu_1683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1687_p3 : STD_LOGIC_VECTOR (89 downto 0);
    signal sext_ln174_4_fu_1694_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_12_fu_1698_p3 : STD_LOGIC_VECTOR (121 downto 0);
    signal sext_ln174_1_fu_1655_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln174_5_fu_1705_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln174_2_fu_1672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1709_p6 : STD_LOGIC_VECTOR (249 downto 0);
    signal grp_fu_1204_ce : STD_LOGIC;
    signal grp_fu_1208_ce : STD_LOGIC;
    signal grp_fu_1212_ce : STD_LOGIC;
    signal grp_fu_1216_ce : STD_LOGIC;
    signal grp_fu_1220_ce : STD_LOGIC;
    signal grp_fu_1224_ce : STD_LOGIC;
    signal grp_fu_1228_ce : STD_LOGIC;
    signal grp_fu_1232_ce : STD_LOGIC;
    signal grp_fu_1236_ce : STD_LOGIC;
    signal grp_fu_1240_ce : STD_LOGIC;
    signal grp_fu_1244_ce : STD_LOGIC;
    signal grp_fu_1248_ce : STD_LOGIC;
    signal grp_fu_1252_ce : STD_LOGIC;
    signal grp_fu_1256_ce : STD_LOGIC;
    signal grp_fu_1260_ce : STD_LOGIC;
    signal grp_fu_1264_ce : STD_LOGIC;
    signal grp_fu_1268_ce : STD_LOGIC;
    signal grp_fu_1272_ce : STD_LOGIC;
    signal grp_fu_1276_ce : STD_LOGIC;
    signal grp_fu_1280_ce : STD_LOGIC;
    signal grp_fu_1284_ce : STD_LOGIC;
    signal grp_fu_1288_ce : STD_LOGIC;
    signal grp_fu_1292_ce : STD_LOGIC;
    signal grp_fu_1296_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_591 : BOOLEAN;
    signal ap_condition_577 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component harris_mul_32s_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component harris_sobel_rowBuffer_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (767 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (767 downto 0) );
    end component;


    component harris_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    rowBuffer_U : component harris_sobel_rowBuffer_RAM_AUTO_1R1W
    generic map (
        DataWidth => 768,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rowBuffer_addr_reg_1789_pp0_iter2_reg,
        ce0 => rowBuffer_ce0,
        we0 => rowBuffer_we0,
        d0 => rowBuffer_d0,
        address1 => rowBuffer_address1,
        ce1 => rowBuffer_ce1,
        q1 => rowBuffer_q1);

    mul_32s_32s_32_5_1_U5 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Gx_var_reg_2146_pp0_iter5_reg,
        din1 => Gx_var_reg_2146_pp0_iter5_reg,
        ce => grp_fu_1204_ce,
        dout => grp_fu_1204_p2);

    mul_32s_32s_32_5_1_U6 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Gy_var_reg_2202_pp0_iter5_reg,
        din1 => Gy_var_reg_2202_pp0_iter5_reg,
        ce => grp_fu_1208_ce,
        dout => grp_fu_1208_p2);

    mul_32s_32s_32_5_1_U7 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Gy_var_reg_2202_pp0_iter5_reg,
        din1 => Gx_var_reg_2146_pp0_iter5_reg,
        ce => grp_fu_1212_ce,
        dout => grp_fu_1212_p2);

    mul_32s_32s_32_5_1_U8 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Gx_var_1_reg_2153_pp0_iter5_reg,
        din1 => Gx_var_1_reg_2153_pp0_iter5_reg,
        ce => grp_fu_1216_ce,
        dout => grp_fu_1216_p2);

    mul_32s_32s_32_5_1_U9 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Gy_var_1_reg_2209_pp0_iter5_reg,
        din1 => Gy_var_1_reg_2209_pp0_iter5_reg,
        ce => grp_fu_1220_ce,
        dout => grp_fu_1220_p2);

    mul_32s_32s_32_5_1_U10 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Gy_var_1_reg_2209_pp0_iter5_reg,
        din1 => Gx_var_1_reg_2153_pp0_iter5_reg,
        ce => grp_fu_1224_ce,
        dout => grp_fu_1224_p2);

    mul_32s_32s_32_5_1_U11 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln69_reg_2160_pp0_iter5_reg,
        din1 => add_ln69_reg_2160_pp0_iter5_reg,
        ce => grp_fu_1228_ce,
        dout => grp_fu_1228_p2);

    mul_32s_32s_32_5_1_U12 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_reg_2216_pp0_iter5_reg,
        din1 => add_ln83_reg_2216_pp0_iter5_reg,
        ce => grp_fu_1232_ce,
        dout => grp_fu_1232_p2);

    mul_32s_32s_32_5_1_U13 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_reg_2216_pp0_iter5_reg,
        din1 => add_ln69_reg_2160_pp0_iter5_reg,
        ce => grp_fu_1236_ce,
        dout => grp_fu_1236_p2);

    mul_32s_32s_32_5_1_U14 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln69_1_reg_2167_pp0_iter5_reg,
        din1 => add_ln69_1_reg_2167_pp0_iter5_reg,
        ce => grp_fu_1240_ce,
        dout => grp_fu_1240_p2);

    mul_32s_32s_32_5_1_U15 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_1_reg_2223_pp0_iter5_reg,
        din1 => add_ln83_1_reg_2223_pp0_iter5_reg,
        ce => grp_fu_1244_ce,
        dout => grp_fu_1244_p2);

    mul_32s_32s_32_5_1_U16 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_1_reg_2223_pp0_iter5_reg,
        din1 => add_ln69_1_reg_2167_pp0_iter5_reg,
        ce => grp_fu_1248_ce,
        dout => grp_fu_1248_p2);

    mul_32s_32s_32_5_1_U17 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln69_2_reg_2174_pp0_iter5_reg,
        din1 => add_ln69_2_reg_2174_pp0_iter5_reg,
        ce => grp_fu_1252_ce,
        dout => grp_fu_1252_p2);

    mul_32s_32s_32_5_1_U18 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_2_reg_2230_pp0_iter5_reg,
        din1 => add_ln83_2_reg_2230_pp0_iter5_reg,
        ce => grp_fu_1256_ce,
        dout => grp_fu_1256_p2);

    mul_32s_32s_32_5_1_U19 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_2_reg_2230_pp0_iter5_reg,
        din1 => add_ln69_2_reg_2174_pp0_iter5_reg,
        ce => grp_fu_1260_ce,
        dout => grp_fu_1260_p2);

    mul_32s_32s_32_5_1_U20 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln69_3_reg_2181_pp0_iter5_reg,
        din1 => add_ln69_3_reg_2181_pp0_iter5_reg,
        ce => grp_fu_1264_ce,
        dout => grp_fu_1264_p2);

    mul_32s_32s_32_5_1_U21 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_3_reg_2237_pp0_iter5_reg,
        din1 => add_ln83_3_reg_2237_pp0_iter5_reg,
        ce => grp_fu_1268_ce,
        dout => grp_fu_1268_p2);

    mul_32s_32s_32_5_1_U22 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_3_reg_2237_pp0_iter5_reg,
        din1 => add_ln69_3_reg_2181_pp0_iter5_reg,
        ce => grp_fu_1272_ce,
        dout => grp_fu_1272_p2);

    mul_32s_32s_32_5_1_U23 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln69_4_reg_2188_pp0_iter5_reg,
        din1 => add_ln69_4_reg_2188_pp0_iter5_reg,
        ce => grp_fu_1276_ce,
        dout => grp_fu_1276_p2);

    mul_32s_32s_32_5_1_U24 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_4_reg_2244_pp0_iter5_reg,
        din1 => add_ln83_4_reg_2244_pp0_iter5_reg,
        ce => grp_fu_1280_ce,
        dout => grp_fu_1280_p2);

    mul_32s_32s_32_5_1_U25 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_4_reg_2244_pp0_iter5_reg,
        din1 => add_ln69_4_reg_2188_pp0_iter5_reg,
        ce => grp_fu_1284_ce,
        dout => grp_fu_1284_p2);

    mul_32s_32s_32_5_1_U26 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln69_5_reg_2195_pp0_iter5_reg,
        din1 => add_ln69_5_reg_2195_pp0_iter5_reg,
        ce => grp_fu_1288_ce,
        dout => grp_fu_1288_p2);

    mul_32s_32s_32_5_1_U27 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_5_reg_2256,
        din1 => add_ln83_5_reg_2256,
        ce => grp_fu_1292_ce,
        dout => grp_fu_1292_p2);

    mul_32s_32s_32_5_1_U28 : component harris_mul_32s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_5_reg_2256,
        din1 => add_ln69_5_reg_2195_pp0_iter5_reg,
        ce => grp_fu_1296_ce,
        dout => grp_fu_1296_p2);

    flow_control_loop_pipe_U : component harris_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_591)) then 
                    i_fu_234 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_fu_234 <= select_ln164_reg_1784;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_577)) then
                if ((icmp_ln164_fu_311_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_238 <= add_ln164_fu_317_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_238 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                    j_fu_230 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_230 <= add_ln165_reg_1769;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln157_1_reg_1795_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Gx_var_1_reg_2153 <= Gx_var_1_fu_968_p2;
                Gx_var_reg_2146 <= Gx_var_fu_951_p2;
                Gy_var_1_reg_2209 <= Gy_var_1_fu_1099_p2;
                Gy_var_reg_2202 <= Gy_var_fu_1085_p2;
                add_ln69_1_reg_2167 <= add_ln69_1_fu_1002_p2;
                add_ln69_2_reg_2174 <= add_ln69_2_fu_1019_p2;
                add_ln69_3_reg_2181 <= add_ln69_3_fu_1036_p2;
                add_ln69_4_reg_2188 <= add_ln69_4_fu_1053_p2;
                add_ln69_5_reg_2195 <= add_ln69_5_fu_1070_p2;
                add_ln69_reg_2160 <= add_ln69_fu_985_p2;
                add_ln83_1_reg_2223 <= add_ln83_1_fu_1129_p2;
                add_ln83_2_reg_2230 <= add_ln83_2_fu_1144_p2;
                add_ln83_3_reg_2237 <= add_ln83_3_fu_1159_p2;
                add_ln83_4_reg_2244 <= add_ln83_4_fu_1174_p2;
                add_ln83_reg_2216 <= add_ln83_fu_1114_p2;
                add_ln84_reg_2251 <= add_ln84_fu_1180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Gx_var_1_reg_2153_pp0_iter5_reg <= Gx_var_1_reg_2153;
                Gx_var_reg_2146_pp0_iter5_reg <= Gx_var_reg_2146;
                Gy_var_1_reg_2209_pp0_iter5_reg <= Gy_var_1_reg_2209;
                Gy_var_reg_2202_pp0_iter5_reg <= Gy_var_reg_2202;
                add_ln69_1_reg_2167_pp0_iter5_reg <= add_ln69_1_reg_2167;
                add_ln69_2_reg_2174_pp0_iter5_reg <= add_ln69_2_reg_2174;
                add_ln69_3_reg_2181_pp0_iter5_reg <= add_ln69_3_reg_2181;
                add_ln69_4_reg_2188_pp0_iter5_reg <= add_ln69_4_reg_2188;
                add_ln69_5_reg_2195_pp0_iter5_reg <= add_ln69_5_reg_2195;
                add_ln69_reg_2160_pp0_iter5_reg <= add_ln69_reg_2160;
                add_ln83_1_reg_2223_pp0_iter5_reg <= add_ln83_1_reg_2223;
                add_ln83_2_reg_2230_pp0_iter5_reg <= add_ln83_2_reg_2230;
                add_ln83_3_reg_2237_pp0_iter5_reg <= add_ln83_3_reg_2237;
                add_ln83_4_reg_2244_pp0_iter5_reg <= add_ln83_4_reg_2244;
                add_ln83_reg_2216_pp0_iter5_reg <= add_ln83_reg_2216;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                cmp63_i_reg_2263_pp0_iter10_reg <= cmp63_i_reg_2263_pp0_iter9_reg;
                cmp63_i_reg_2263_pp0_iter6_reg <= cmp63_i_reg_2263;
                cmp63_i_reg_2263_pp0_iter7_reg <= cmp63_i_reg_2263_pp0_iter6_reg;
                cmp63_i_reg_2263_pp0_iter8_reg <= cmp63_i_reg_2263_pp0_iter7_reg;
                cmp63_i_reg_2263_pp0_iter9_reg <= cmp63_i_reg_2263_pp0_iter8_reg;
                obj_var_1_reg_1811 <= inStream_dout(63 downto 32);
                obj_var_reg_1804 <= obj_var_fu_412_p1;
                rowBuffer_addr_reg_1789_pp0_iter2_reg <= rowBuffer_addr_reg_1789;
                select_ln157_1_reg_1795 <= select_ln157_1_fu_407_p3;
                select_ln157_1_reg_1795_pp0_iter10_reg <= select_ln157_1_reg_1795_pp0_iter9_reg;
                select_ln157_1_reg_1795_pp0_iter3_reg <= select_ln157_1_reg_1795;
                select_ln157_1_reg_1795_pp0_iter4_reg <= select_ln157_1_reg_1795_pp0_iter3_reg;
                select_ln157_1_reg_1795_pp0_iter5_reg <= select_ln157_1_reg_1795_pp0_iter4_reg;
                select_ln157_1_reg_1795_pp0_iter6_reg <= select_ln157_1_reg_1795_pp0_iter5_reg;
                select_ln157_1_reg_1795_pp0_iter7_reg <= select_ln157_1_reg_1795_pp0_iter6_reg;
                select_ln157_1_reg_1795_pp0_iter8_reg <= select_ln157_1_reg_1795_pp0_iter7_reg;
                select_ln157_1_reg_1795_pp0_iter9_reg <= select_ln157_1_reg_1795_pp0_iter8_reg;
                select_ln157_reg_1763_pp0_iter2_reg <= select_ln157_reg_1763_pp0_iter1_reg;
                select_ln157_reg_1763_pp0_iter3_reg <= select_ln157_reg_1763_pp0_iter2_reg;
                select_ln157_reg_1763_pp0_iter4_reg <= select_ln157_reg_1763_pp0_iter3_reg;
                sub_ln84_6_reg_2140_pp0_iter4_reg <= sub_ln84_6_reg_2140;
                tmp_10_i_reg_1884 <= rowBuffer_q1(351 downto 320);
                tmp_10_i_reg_1884_pp0_iter3_reg <= tmp_10_i_reg_1884;
                tmp_12_i_reg_1897 <= rowBuffer_q1(383 downto 352);
                tmp_12_i_reg_1897_pp0_iter3_reg <= tmp_12_i_reg_1897;
                tmp_14_i_reg_1910 <= rowBuffer_q1(415 downto 384);
                tmp_14_i_reg_1910_pp0_iter3_reg <= tmp_14_i_reg_1910;
                tmp_16_i_reg_1923 <= rowBuffer_q1(447 downto 416);
                tmp_16_i_reg_1923_pp0_iter3_reg <= tmp_16_i_reg_1923;
                tmp_18_i_reg_1936 <= rowBuffer_q1(479 downto 448);
                tmp_18_i_reg_1936_pp0_iter3_reg <= tmp_18_i_reg_1936;
                tmp_1_i_reg_1839 <= inStream_dout(191 downto 160);
                tmp_20_i_reg_1947 <= rowBuffer_q1(511 downto 480);
                tmp_20_i_reg_1947_pp0_iter3_reg <= tmp_20_i_reg_1947;
                tmp_20_i_reg_1947_pp0_iter4_reg <= tmp_20_i_reg_1947_pp0_iter3_reg;
                tmp_24_i_reg_1958 <= rowBuffer_q1(767 downto 256);
                tmp_2_i_reg_1846 <= inStream_dout(223 downto 192);
                tmp_3_i_reg_1852 <= inStream_dout(255 downto 224);
                tmp_3_i_reg_1852_pp0_iter3_reg <= tmp_3_i_reg_1852;
                tmp_3_reg_1799 <= inStream_dout;
                tmp_4_i_reg_1858 <= rowBuffer_q1(287 downto 256);
                tmp_6_i_reg_1871 <= rowBuffer_q1(319 downto 288);
                tmp_8_i_reg_1818 <= inStream_dout(95 downto 64);
                tmp_9_i_reg_1825 <= inStream_dout(127 downto 96);
                tmp_i_reg_1832 <= inStream_dout(159 downto 128);
                trunc_ln173_1_reg_1891 <= rowBuffer_q1(606 downto 576);
                trunc_ln173_2_reg_1904 <= rowBuffer_q1(638 downto 608);
                trunc_ln173_3_reg_1917 <= rowBuffer_q1(670 downto 640);
                trunc_ln173_4_reg_1930 <= rowBuffer_q1(702 downto 672);
                trunc_ln173_5_reg_1942 <= rowBuffer_q1(734 downto 704);
                trunc_ln173_s_reg_1878 <= rowBuffer_q1(574 downto 544);
                trunc_ln1_reg_1953 <= rowBuffer_q1(766 downto 736);
                trunc_ln_reg_1865 <= rowBuffer_q1(542 downto 512);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp63_i_reg_2263_pp0_iter9_reg = ap_const_lv1_0) and (select_ln157_1_reg_1795_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Gxy_var_reg_2283 <= grp_fu_1212_p2(31 downto 6);
                tmp_4_reg_2313 <= grp_fu_1216_p2(31 downto 6);
                tmp_5_reg_2348 <= grp_fu_1220_p2(31 downto 6);
                tmp_9_reg_2393 <= grp_fu_1224_p2(31 downto 6);
                trunc_ln156_1_reg_2278 <= grp_fu_1208_p2(31 downto 6);
                trunc_ln3_reg_2273 <= grp_fu_1204_p2(31 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln164_fu_311_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln165_reg_1769 <= add_ln165_fu_340_p2;
                icmp_ln165_reg_1757 <= icmp_ln165_fu_326_p2;
                select_ln157_reg_1763 <= select_ln157_fu_332_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln157_1_reg_1795_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln83_5_reg_2256 <= add_ln83_5_fu_1193_p2;
                cmp63_i_reg_2263 <= cmp63_i_fu_1199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                icmp_ln165_reg_1757_pp0_iter1_reg <= icmp_ln165_reg_1757;
                rowBuffer_addr_reg_1789 <= j_cast_i_fu_399_p1(4 - 1 downto 0);
                select_ln157_reg_1763_pp0_iter1_reg <= select_ln157_reg_1763;
                select_ln164_reg_1784 <= select_ln164_fu_392_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln165_reg_1757 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp22_reg_1779 <= icmp22_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln165_reg_1757 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_reg_1774 <= icmp_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln157_1_reg_1795 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln68_1_reg_2022 <= sub_ln68_1_fu_821_p2;
                sub_ln68_2_reg_2032 <= sub_ln68_2_fu_833_p2;
                sub_ln68_3_reg_2042 <= sub_ln68_3_fu_846_p2;
                sub_ln68_4_reg_2052 <= sub_ln68_4_fu_859_p2;
                sub_ln68_5_reg_2062 <= sub_ln68_5_fu_872_p2;
                sub_ln68_6_reg_2072 <= sub_ln68_6_fu_885_p2;
                sub_ln68_7_reg_2082 <= sub_ln68_7_fu_898_p2;
                sub_ln68_reg_2007 <= sub_ln68_fu_809_p2;
                sub_ln69_1_reg_2012 <= sub_ln69_1_fu_813_p2;
                sub_ln69_2_reg_2027 <= sub_ln69_2_fu_825_p2;
                sub_ln69_3_reg_2037 <= sub_ln69_3_fu_838_p2;
                sub_ln69_4_reg_2047 <= sub_ln69_4_fu_851_p2;
                sub_ln69_5_reg_2057 <= sub_ln69_5_fu_864_p2;
                sub_ln69_6_reg_2067 <= sub_ln69_6_fu_877_p2;
                sub_ln69_7_reg_2077 <= sub_ln69_7_fu_890_p2;
                sub_ln69_reg_1997 <= sub_ln69_fu_801_p2;
                sub_ln70_1_reg_2017 <= sub_ln70_1_fu_817_p2;
                sub_ln70_reg_2002 <= sub_ln70_fu_805_p2;
                sub_ln82_reg_2100 <= sub_ln82_fu_911_p2;
                sub_ln83_reg_2087 <= sub_ln83_fu_903_p2;
                sub_ln84_1_reg_2105 <= sub_ln84_1_fu_915_p2;
                sub_ln84_2_reg_2112 <= sub_ln84_2_fu_919_p2;
                sub_ln84_3_reg_2119 <= sub_ln84_3_fu_923_p2;
                sub_ln84_4_reg_2126 <= sub_ln84_4_fu_927_p2;
                sub_ln84_5_reg_2133 <= sub_ln84_5_fu_931_p2;
                sub_ln84_6_reg_2140 <= sub_ln84_6_fu_935_p2;
                sub_ln84_reg_2093 <= sub_ln84_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln157_1_fu_407_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_25_i_reg_1963 <= windowBuffer_fu_242(479 downto 448);
                tmp_26_i_reg_1969 <= windowBuffer_fu_242(511 downto 480);
                tmp_29_i_reg_1985 <= windowBuffer_fu_242(1503 downto 1472);
                tmp_30_i_reg_1991 <= windowBuffer_fu_242(1535 downto 1504);
                trunc_ln2_reg_1975 <= windowBuffer_fu_242(990 downto 960);
                trunc_ln54_s_reg_1980 <= windowBuffer_fu_242(1022 downto 992);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln157_1_reg_1795_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_7_reg_2353 <= grp_fu_1232_p2(31 downto 6);
                tmp_8_reg_2383 <= grp_fu_1284_p2(6 downto 6);
                tmp_s_reg_2388 <= grp_fu_1284_p2(31 downto 7);
                trunc_ln174_1_reg_2323 <= grp_fu_1240_p2(31 downto 6);
                trunc_ln174_2_reg_2328 <= grp_fu_1252_p2(31 downto 6);
                trunc_ln174_3_reg_2333 <= grp_fu_1264_p2(31 downto 6);
                trunc_ln174_4_reg_2338 <= grp_fu_1276_p2(31 downto 6);
                trunc_ln174_5_reg_2343 <= grp_fu_1288_p2(31 downto 6);
                trunc_ln174_6_reg_2378 <= grp_fu_1292_p2(31 downto 6);
                trunc_ln174_7_reg_2358 <= grp_fu_1244_p2(31 downto 6);
                trunc_ln174_8_reg_2363 <= grp_fu_1256_p2(31 downto 6);
                trunc_ln174_9_reg_2368 <= grp_fu_1268_p2(31 downto 6);
                trunc_ln174_s_reg_2373 <= grp_fu_1280_p2(31 downto 6);
                trunc_ln206_1_reg_2293 <= grp_fu_1248_p2(31 downto 6);
                trunc_ln206_2_reg_2298 <= grp_fu_1260_p2(31 downto 6);
                trunc_ln206_3_reg_2303 <= grp_fu_1272_p2(31 downto 6);
                trunc_ln206_5_reg_2308 <= grp_fu_1296_p2(31 downto 6);
                trunc_ln4_reg_2288 <= grp_fu_1236_p2(31 downto 6);
                trunc_ln5_reg_2318 <= grp_fu_1228_p2(31 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln157_1_fu_407_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                windowBuffer_fu_242 <= windowBuffer_1_fu_769_p7;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Gx_var_1_fu_968_p2 <= std_logic_vector(unsigned(add_ln69_8_fu_963_p2) + unsigned(sub_ln68_1_reg_2022));
    Gx_var_fu_951_p2 <= std_logic_vector(unsigned(add_ln69_6_fu_946_p2) + unsigned(sub_ln68_reg_2007));

    GxxStream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, GxxStream_full_n, select_ln157_1_reg_1795_pp0_iter10_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0))) then 
            GxxStream_blk_n <= GxxStream_full_n;
        else 
            GxxStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    GxxStream_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1584_p15),256));

    GxxStream_write_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln157_1_reg_1795_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0))) then 
            GxxStream_write <= ap_const_logic_1;
        else 
            GxxStream_write <= ap_const_logic_0;
        end if; 
    end process;

    Gxx_sroa_0_0141_i_fu_1560_p3 <= 
        ap_const_lv26_0 when (cmp63_i_reg_2263_pp0_iter10_reg(0) = '1') else 
        trunc_ln3_reg_2273;

    GxyStream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln157_1_reg_1795_pp0_iter10_reg, GxyStream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0))) then 
            GxyStream_blk_n <= GxyStream_full_n;
        else 
            GxyStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        GxyStream_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_1709_p6),256));


    GxyStream_write_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln157_1_reg_1795_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0))) then 
            GxyStream_write <= ap_const_logic_1;
        else 
            GxyStream_write <= ap_const_logic_0;
        end if; 
    end process;

    Gxy_sroa_0_0143_i_fu_1548_p3 <= 
        ap_const_lv26_0 when (cmp63_i_reg_2263_pp0_iter10_reg(0) = '1') else 
        Gxy_var_reg_2283;
    Gy_var_1_fu_1099_p2 <= std_logic_vector(unsigned(add_ln83_8_fu_1095_p2) + unsigned(shl_ln83_1_fu_1090_p2));
    Gy_var_fu_1085_p2 <= std_logic_vector(unsigned(add_ln83_6_fu_1080_p2) + unsigned(sub_ln82_reg_2100));

    GyyStream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln157_1_reg_1795_pp0_iter10_reg, GyyStream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0))) then 
            GyyStream_blk_n <= GyyStream_full_n;
        else 
            GyyStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    GyyStream_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1621_p15),256));

    GyyStream_write_assign_proc : process(ap_enable_reg_pp0_iter11, select_ln157_1_reg_1795_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0))) then 
            GyyStream_write <= ap_const_logic_1;
        else 
            GyyStream_write <= ap_const_logic_0;
        end if; 
    end process;

    Gyy_sroa_0_0142_i_fu_1554_p3 <= 
        ap_const_lv26_0 when (cmp63_i_reg_2263_pp0_iter10_reg(0) = '1') else 
        trunc_ln156_1_reg_2278;
    add_ln164_1_fu_354_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv8_1));
    add_ln164_fu_317_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln165_fu_340_p2 <= std_logic_vector(unsigned(select_ln157_fu_332_p3) + unsigned(ap_const_lv5_1));
    add_ln69_10_fu_980_p2 <= std_logic_vector(unsigned(tmp_10_i_reg_1884_pp0_iter3_reg) + unsigned(shl_ln69_2_fu_973_p3));
    add_ln69_11_fu_997_p2 <= std_logic_vector(unsigned(tmp_12_i_reg_1897_pp0_iter3_reg) + unsigned(shl_ln69_3_fu_990_p3));
    add_ln69_12_fu_1014_p2 <= std_logic_vector(unsigned(tmp_14_i_reg_1910_pp0_iter3_reg) + unsigned(shl_ln69_4_fu_1007_p3));
    add_ln69_13_fu_1031_p2 <= std_logic_vector(unsigned(tmp_16_i_reg_1923_pp0_iter3_reg) + unsigned(shl_ln69_5_fu_1024_p3));
    add_ln69_14_fu_1048_p2 <= std_logic_vector(unsigned(tmp_18_i_reg_1936_pp0_iter3_reg) + unsigned(shl_ln69_6_fu_1041_p3));
    add_ln69_15_fu_1065_p2 <= std_logic_vector(unsigned(tmp_20_i_reg_1947_pp0_iter3_reg) + unsigned(shl_ln69_7_fu_1058_p3));
    add_ln69_1_fu_1002_p2 <= std_logic_vector(unsigned(add_ln69_11_fu_997_p2) + unsigned(sub_ln68_3_reg_2042));
    add_ln69_2_fu_1019_p2 <= std_logic_vector(unsigned(add_ln69_12_fu_1014_p2) + unsigned(sub_ln68_4_reg_2052));
    add_ln69_3_fu_1036_p2 <= std_logic_vector(unsigned(add_ln69_13_fu_1031_p2) + unsigned(sub_ln68_5_reg_2062));
    add_ln69_4_fu_1053_p2 <= std_logic_vector(unsigned(add_ln69_14_fu_1048_p2) + unsigned(sub_ln68_6_reg_2072));
    add_ln69_5_fu_1070_p2 <= std_logic_vector(unsigned(add_ln69_15_fu_1065_p2) + unsigned(sub_ln68_7_reg_2082));
    add_ln69_6_fu_946_p2 <= std_logic_vector(unsigned(shl_ln_fu_939_p3) + unsigned(sub_ln70_reg_2002));
    add_ln69_8_fu_963_p2 <= std_logic_vector(unsigned(shl_ln69_1_fu_956_p3) + unsigned(sub_ln70_1_reg_2017));
    add_ln69_fu_985_p2 <= std_logic_vector(unsigned(add_ln69_10_fu_980_p2) + unsigned(sub_ln68_2_reg_2032));
    add_ln83_10_fu_1110_p2 <= std_logic_vector(unsigned(sub_ln84_reg_2093) + unsigned(sub_ln84_2_reg_2112));
    add_ln83_11_fu_1125_p2 <= std_logic_vector(unsigned(sub_ln84_1_reg_2105) + unsigned(sub_ln84_3_reg_2119));
    add_ln83_12_fu_1140_p2 <= std_logic_vector(unsigned(sub_ln84_2_reg_2112) + unsigned(sub_ln84_4_reg_2126));
    add_ln83_13_fu_1155_p2 <= std_logic_vector(unsigned(sub_ln84_3_reg_2119) + unsigned(sub_ln84_5_reg_2133));
    add_ln83_14_fu_1170_p2 <= std_logic_vector(unsigned(sub_ln84_4_reg_2126) + unsigned(sub_ln84_6_reg_2140));
    add_ln83_1_fu_1129_p2 <= std_logic_vector(unsigned(add_ln83_11_fu_1125_p2) + unsigned(shl_ln83_3_fu_1120_p2));
    add_ln83_2_fu_1144_p2 <= std_logic_vector(unsigned(add_ln83_12_fu_1140_p2) + unsigned(shl_ln83_4_fu_1135_p2));
    add_ln83_3_fu_1159_p2 <= std_logic_vector(unsigned(add_ln83_13_fu_1155_p2) + unsigned(shl_ln83_5_fu_1150_p2));
    add_ln83_4_fu_1174_p2 <= std_logic_vector(unsigned(add_ln83_14_fu_1170_p2) + unsigned(shl_ln83_6_fu_1165_p2));
    add_ln83_5_fu_1193_p2 <= std_logic_vector(unsigned(sub_ln82_1_fu_1189_p2) + unsigned(shl_ln83_7_fu_1184_p2));
    add_ln83_6_fu_1080_p2 <= std_logic_vector(unsigned(shl_ln83_fu_1075_p2) + unsigned(sub_ln84_reg_2093));
    add_ln83_8_fu_1095_p2 <= std_logic_vector(unsigned(sub_ln83_reg_2087) + unsigned(sub_ln84_1_reg_2105));
    add_ln83_fu_1114_p2 <= std_logic_vector(unsigned(add_ln83_10_fu_1110_p2) + unsigned(shl_ln83_2_fu_1105_p2));
    add_ln84_fu_1180_p2 <= std_logic_vector(unsigned(sub_ln84_5_reg_2133) + unsigned(tmp_3_i_reg_1852_pp0_iter3_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter11, ap_done_reg, inStream_empty_n, GxxStream_full_n, select_ln157_1_reg_1795_pp0_iter10_reg, GyyStream_full_n, GxyStream_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((inStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (((ap_const_logic_0 = GxxStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GxyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GyyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter11, ap_done_reg, inStream_empty_n, GxxStream_full_n, select_ln157_1_reg_1795_pp0_iter10_reg, GyyStream_full_n, GxyStream_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((inStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (((ap_const_logic_0 = GxxStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GxyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GyyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter11, ap_done_reg, inStream_empty_n, GxxStream_full_n, select_ln157_1_reg_1795_pp0_iter10_reg, GyyStream_full_n, GxyStream_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((inStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (((ap_const_logic_0 = GxxStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GxyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GyyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(GxxStream_full_n, select_ln157_1_reg_1795_pp0_iter10_reg, GyyStream_full_n, GxyStream_full_n)
    begin
                ap_block_state12_pp0_stage0_iter11 <= (((ap_const_logic_0 = GxxStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GxyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = GyyStream_full_n) and (select_ln157_1_reg_1795_pp0_iter10_reg = ap_const_lv1_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(inStream_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (inStream_empty_n = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_577_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_577 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_591_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_loop_init_pp0_iter1_reg)
    begin
                ap_condition_591 <= ((ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln164_fu_311_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln164_fu_311_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, select_ln164_reg_1784, i_fu_234, ap_condition_591)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_591)) then 
                ap_sig_allocacmp_i_load <= ap_const_lv8_0;
            elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_load <= select_ln164_reg_1784;
            else 
                ap_sig_allocacmp_i_load <= i_fu_234;
            end if;
        else 
            ap_sig_allocacmp_i_load <= i_fu_234;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_238, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_238;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, add_ln165_reg_1769, j_fu_230, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                ap_sig_allocacmp_j_load <= ap_const_lv5_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_j_load <= add_ln165_reg_1769;
            else 
                ap_sig_allocacmp_j_load <= j_fu_230;
            end if;
        else 
            ap_sig_allocacmp_j_load <= j_fu_230;
        end if; 
    end process;

    cmp63_i_fu_1199_p2 <= "1" when (select_ln157_reg_1763_pp0_iter4_reg = ap_const_lv5_0) else "0";
    empty_34_fu_1615_p3 <= 
        ap_const_lv26_0 when (cmp63_i_reg_2263_pp0_iter10_reg(0) = '1') else 
        tmp_5_reg_2348;
    empty_35_fu_1658_p3 <= 
        ap_const_lv26_0 when (cmp63_i_reg_2263_pp0_iter10_reg(0) = '1') else 
        tmp_9_reg_2393;
    empty_fu_1578_p3 <= 
        ap_const_lv26_0 when (cmp63_i_reg_2263_pp0_iter10_reg(0) = '1') else 
        tmp_4_reg_2313;

    grp_fu_1204_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1204_ce <= ap_const_logic_1;
        else 
            grp_fu_1204_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1208_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1208_ce <= ap_const_logic_1;
        else 
            grp_fu_1208_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1212_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1212_ce <= ap_const_logic_1;
        else 
            grp_fu_1212_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1216_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1216_ce <= ap_const_logic_1;
        else 
            grp_fu_1216_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1220_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1220_ce <= ap_const_logic_1;
        else 
            grp_fu_1220_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1224_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1224_ce <= ap_const_logic_1;
        else 
            grp_fu_1224_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1228_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1228_ce <= ap_const_logic_1;
        else 
            grp_fu_1228_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1232_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1232_ce <= ap_const_logic_1;
        else 
            grp_fu_1232_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1236_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1236_ce <= ap_const_logic_1;
        else 
            grp_fu_1236_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1240_ce <= ap_const_logic_1;
        else 
            grp_fu_1240_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1244_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1244_ce <= ap_const_logic_1;
        else 
            grp_fu_1244_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1248_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1248_ce <= ap_const_logic_1;
        else 
            grp_fu_1248_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1252_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1252_ce <= ap_const_logic_1;
        else 
            grp_fu_1252_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1256_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1256_ce <= ap_const_logic_1;
        else 
            grp_fu_1256_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1260_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1260_ce <= ap_const_logic_1;
        else 
            grp_fu_1260_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1264_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1264_ce <= ap_const_logic_1;
        else 
            grp_fu_1264_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1268_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1268_ce <= ap_const_logic_1;
        else 
            grp_fu_1268_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1272_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1272_ce <= ap_const_logic_1;
        else 
            grp_fu_1272_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1276_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1276_ce <= ap_const_logic_1;
        else 
            grp_fu_1276_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1280_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1280_ce <= ap_const_logic_1;
        else 
            grp_fu_1280_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1284_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1284_ce <= ap_const_logic_1;
        else 
            grp_fu_1284_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1288_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1288_ce <= ap_const_logic_1;
        else 
            grp_fu_1288_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1292_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1292_ce <= ap_const_logic_1;
        else 
            grp_fu_1292_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1296_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1296_ce <= ap_const_logic_1;
        else 
            grp_fu_1296_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp22_fu_386_p2 <= "1" when (tmp_1_fu_376_p4 = ap_const_lv7_0) else "0";
    icmp_fu_370_p2 <= "1" when (tmp_fu_360_p4 = ap_const_lv7_0) else "0";
    icmp_ln164_fu_311_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv12_800) else "0";
    icmp_ln165_fu_326_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_10) else "0";

    inStream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, inStream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            inStream_blk_n <= inStream_empty_n;
        else 
            inStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inStream_read <= ap_const_logic_1;
        else 
            inStream_read <= ap_const_logic_0;
        end if; 
    end process;

    j_cast_i_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln157_reg_1763),64));
    obj_var_fu_412_p1 <= inStream_dout(32 - 1 downto 0);
    or_ln_fu_1664_p3 <= (empty_35_fu_1658_p3 & sext_ln156_fu_1574_p1);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rowBuffer_address1 <= j_cast_i_fu_399_p1(4 - 1 downto 0);

    rowBuffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rowBuffer_ce0 <= ap_const_logic_1;
        else 
            rowBuffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rowBuffer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rowBuffer_ce1 <= ap_const_logic_1;
        else 
            rowBuffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rowBuffer_d0 <= (tmp_3_reg_1799 & tmp_24_i_reg_1958);

    rowBuffer_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rowBuffer_we0 <= ap_const_logic_1;
        else 
            rowBuffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln157_1_fu_407_p3 <= 
        icmp_reg_1774 when (icmp_ln165_reg_1757_pp0_iter1_reg(0) = '1') else 
        icmp22_reg_1779;
    select_ln157_fu_332_p3 <= 
        ap_const_lv5_0 when (icmp_ln165_fu_326_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln164_fu_392_p3 <= 
        add_ln164_1_fu_354_p2 when (icmp_ln165_reg_1757(0) = '1') else 
        ap_sig_allocacmp_i_load;
        sext_ln156_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Gxy_sroa_0_0143_i_fu_1548_p3),32));

        sext_ln174_1_fu_1655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_2388),31));

        sext_ln174_2_fu_1672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_fu_1664_p3),64));

        sext_ln174_3_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_1676_p3),64));

        sext_ln174_4_fu_1694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_1687_p3),96));

        sext_ln174_5_fu_1705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_1698_p3),128));

        sext_ln174_fu_1652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_2288),32));

    shl_ln69_1_fu_956_p3 <= (sub_ln69_1_reg_2012 & ap_const_lv1_0);
    shl_ln69_2_fu_973_p3 <= (sub_ln69_2_reg_2027 & ap_const_lv1_0);
    shl_ln69_3_fu_990_p3 <= (sub_ln69_3_reg_2037 & ap_const_lv1_0);
    shl_ln69_4_fu_1007_p3 <= (sub_ln69_4_reg_2047 & ap_const_lv1_0);
    shl_ln69_5_fu_1024_p3 <= (sub_ln69_5_reg_2057 & ap_const_lv1_0);
    shl_ln69_6_fu_1041_p3 <= (sub_ln69_6_reg_2067 & ap_const_lv1_0);
    shl_ln69_7_fu_1058_p3 <= (sub_ln69_7_reg_2077 & ap_const_lv1_0);
    shl_ln83_1_fu_1090_p2 <= std_logic_vector(shift_left(unsigned(sub_ln84_reg_2093),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln83_2_fu_1105_p2 <= std_logic_vector(shift_left(unsigned(sub_ln84_1_reg_2105),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln83_3_fu_1120_p2 <= std_logic_vector(shift_left(unsigned(sub_ln84_2_reg_2112),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln83_4_fu_1135_p2 <= std_logic_vector(shift_left(unsigned(sub_ln84_3_reg_2119),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln83_5_fu_1150_p2 <= std_logic_vector(shift_left(unsigned(sub_ln84_4_reg_2126),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln83_6_fu_1165_p2 <= std_logic_vector(shift_left(unsigned(sub_ln84_5_reg_2133),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln83_7_fu_1184_p2 <= std_logic_vector(shift_left(unsigned(sub_ln84_6_reg_2140_pp0_iter4_reg),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln83_fu_1075_p2 <= std_logic_vector(shift_left(unsigned(sub_ln83_reg_2087),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln_fu_939_p3 <= (sub_ln69_reg_1997 & ap_const_lv1_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln68_1_fu_821_p2 <= std_logic_vector(unsigned(tmp_6_i_reg_1871) - unsigned(tmp_26_i_reg_1969));
    sub_ln68_2_fu_833_p2 <= std_logic_vector(unsigned(sub_ln70_2_fu_829_p2) - unsigned(tmp_4_i_reg_1858));
    sub_ln68_3_fu_846_p2 <= std_logic_vector(unsigned(sub_ln70_3_fu_842_p2) - unsigned(tmp_6_i_reg_1871));
    sub_ln68_4_fu_859_p2 <= std_logic_vector(unsigned(sub_ln70_4_fu_855_p2) - unsigned(tmp_10_i_reg_1884));
    sub_ln68_5_fu_872_p2 <= std_logic_vector(unsigned(sub_ln70_5_fu_868_p2) - unsigned(tmp_12_i_reg_1897));
    sub_ln68_6_fu_885_p2 <= std_logic_vector(unsigned(sub_ln70_6_fu_881_p2) - unsigned(tmp_14_i_reg_1910));
    sub_ln68_7_fu_898_p2 <= std_logic_vector(unsigned(sub_ln70_7_fu_894_p2) - unsigned(tmp_16_i_reg_1923));
    sub_ln68_fu_809_p2 <= std_logic_vector(unsigned(tmp_4_i_reg_1858) - unsigned(tmp_25_i_reg_1963));
    sub_ln69_1_fu_813_p2 <= std_logic_vector(unsigned(trunc_ln173_s_reg_1878) - unsigned(trunc_ln54_s_reg_1980));
    sub_ln69_2_fu_825_p2 <= std_logic_vector(unsigned(trunc_ln173_1_reg_1891) - unsigned(trunc_ln_reg_1865));
    sub_ln69_3_fu_838_p2 <= std_logic_vector(unsigned(trunc_ln173_2_reg_1904) - unsigned(trunc_ln173_s_reg_1878));
    sub_ln69_4_fu_851_p2 <= std_logic_vector(unsigned(trunc_ln173_3_reg_1917) - unsigned(trunc_ln173_1_reg_1891));
    sub_ln69_5_fu_864_p2 <= std_logic_vector(unsigned(trunc_ln173_4_reg_1930) - unsigned(trunc_ln173_2_reg_1904));
    sub_ln69_6_fu_877_p2 <= std_logic_vector(unsigned(trunc_ln173_5_reg_1942) - unsigned(trunc_ln173_3_reg_1917));
    sub_ln69_7_fu_890_p2 <= std_logic_vector(unsigned(trunc_ln1_reg_1953) - unsigned(trunc_ln173_4_reg_1930));
    sub_ln69_fu_801_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1865) - unsigned(trunc_ln2_reg_1975));
    sub_ln70_1_fu_817_p2 <= std_logic_vector(unsigned(obj_var_1_reg_1811) - unsigned(tmp_30_i_reg_1991));
    sub_ln70_2_fu_829_p2 <= std_logic_vector(unsigned(tmp_8_i_reg_1818) - unsigned(obj_var_reg_1804));
    sub_ln70_3_fu_842_p2 <= std_logic_vector(unsigned(tmp_9_i_reg_1825) - unsigned(obj_var_1_reg_1811));
    sub_ln70_4_fu_855_p2 <= std_logic_vector(unsigned(tmp_i_reg_1832) - unsigned(tmp_8_i_reg_1818));
    sub_ln70_5_fu_868_p2 <= std_logic_vector(unsigned(tmp_1_i_reg_1839) - unsigned(tmp_9_i_reg_1825));
    sub_ln70_6_fu_881_p2 <= std_logic_vector(unsigned(tmp_2_i_reg_1846) - unsigned(tmp_i_reg_1832));
    sub_ln70_7_fu_894_p2 <= std_logic_vector(unsigned(tmp_3_i_reg_1852) - unsigned(tmp_1_i_reg_1839));
    sub_ln70_fu_805_p2 <= std_logic_vector(unsigned(obj_var_reg_1804) - unsigned(tmp_29_i_reg_1985));
    sub_ln82_1_fu_1189_p2 <= std_logic_vector(unsigned(add_ln84_reg_2251) - unsigned(tmp_20_i_reg_1947_pp0_iter4_reg));
    sub_ln82_fu_911_p2 <= std_logic_vector(unsigned(tmp_29_i_reg_1985) - unsigned(tmp_25_i_reg_1963));
    sub_ln83_fu_903_p2 <= std_logic_vector(unsigned(tmp_30_i_reg_1991) - unsigned(tmp_26_i_reg_1969));
    sub_ln84_1_fu_915_p2 <= std_logic_vector(unsigned(obj_var_1_reg_1811) - unsigned(tmp_6_i_reg_1871));
    sub_ln84_2_fu_919_p2 <= std_logic_vector(unsigned(tmp_8_i_reg_1818) - unsigned(tmp_10_i_reg_1884));
    sub_ln84_3_fu_923_p2 <= std_logic_vector(unsigned(tmp_9_i_reg_1825) - unsigned(tmp_12_i_reg_1897));
    sub_ln84_4_fu_927_p2 <= std_logic_vector(unsigned(tmp_i_reg_1832) - unsigned(tmp_14_i_reg_1910));
    sub_ln84_5_fu_931_p2 <= std_logic_vector(unsigned(tmp_1_i_reg_1839) - unsigned(tmp_16_i_reg_1923));
    sub_ln84_6_fu_935_p2 <= std_logic_vector(unsigned(tmp_2_i_reg_1846) - unsigned(tmp_18_i_reg_1936));
    sub_ln84_fu_907_p2 <= std_logic_vector(unsigned(obj_var_reg_1804) - unsigned(tmp_4_i_reg_1858));
    tmp_10_fu_1676_p3 <= (trunc_ln206_1_reg_2293 & sext_ln174_fu_1652_p1);
    tmp_11_fu_1687_p3 <= (trunc_ln206_2_reg_2298 & sext_ln174_3_fu_1683_p1);
    tmp_12_fu_1698_p3 <= (trunc_ln206_3_reg_2303 & sext_ln174_4_fu_1694_p1);
    tmp_13_fu_1709_p6 <= ((((trunc_ln206_5_reg_2308 & sext_ln174_1_fu_1655_p1) & tmp_8_reg_2383) & sext_ln174_5_fu_1705_p1) & sext_ln174_2_fu_1672_p1);
    tmp_1_fu_376_p4 <= ap_sig_allocacmp_i_load(7 downto 1);
    tmp_2_fu_1584_p15 <= (((((((((((((trunc_ln174_5_reg_2343 & ap_const_lv6_0) & trunc_ln174_4_reg_2338) & ap_const_lv6_0) & trunc_ln174_3_reg_2333) & ap_const_lv6_0) & trunc_ln174_2_reg_2328) & ap_const_lv6_0) & trunc_ln174_1_reg_2323) & ap_const_lv6_0) & trunc_ln5_reg_2318) & ap_const_lv6_0) & empty_fu_1578_p3) & zext_ln156_fu_1566_p1);
    tmp_31_i_fu_719_p4 <= windowBuffer_fu_242(1535 downto 1280);
    tmp_32_i_fu_729_p4 <= rowBuffer_q1(767 downto 512);
    tmp_33_i_fu_739_p4 <= windowBuffer_fu_242(1023 downto 768);
    tmp_34_i_fu_749_p4 <= rowBuffer_q1(511 downto 256);
    tmp_35_i_fu_759_p4 <= windowBuffer_fu_242(511 downto 256);
    tmp_6_fu_1621_p15 <= (((((((((((((trunc_ln174_6_reg_2378 & ap_const_lv6_0) & trunc_ln174_s_reg_2373) & ap_const_lv6_0) & trunc_ln174_9_reg_2368) & ap_const_lv6_0) & trunc_ln174_8_reg_2363) & ap_const_lv6_0) & trunc_ln174_7_reg_2358) & ap_const_lv6_0) & tmp_7_reg_2353) & ap_const_lv6_0) & empty_34_fu_1615_p3) & zext_ln156_1_fu_1570_p1);
    tmp_fu_360_p4 <= add_ln164_1_fu_354_p2(7 downto 1);
    windowBuffer_1_fu_769_p7 <= (((((inStream_dout & tmp_31_i_fu_719_p4) & tmp_32_i_fu_729_p4) & tmp_33_i_fu_739_p4) & tmp_34_i_fu_749_p4) & tmp_35_i_fu_759_p4);
    zext_ln156_1_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Gyy_sroa_0_0142_i_fu_1554_p3),32));
    zext_ln156_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Gxx_sroa_0_0141_i_fu_1560_p3),32));
end behav;
