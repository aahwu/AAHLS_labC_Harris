-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity harris_filter is
port (
    GxxStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    GxxStream_empty_n : IN STD_LOGIC;
    GxxStream_read : OUT STD_LOGIC;
    SxxStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    SxxStream_full_n : IN STD_LOGIC;
    SxxStream_write : OUT STD_LOGIC;
    GyyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    GyyStream_empty_n : IN STD_LOGIC;
    GyyStream_read : OUT STD_LOGIC;
    SyyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    SyyStream_full_n : IN STD_LOGIC;
    SyyStream_write : OUT STD_LOGIC;
    GxyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    GxyStream_empty_n : IN STD_LOGIC;
    GxyStream_read : OUT STD_LOGIC;
    SxyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    SxyStream_full_n : IN STD_LOGIC;
    SxyStream_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of harris_filter is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal filterSingle_U0_ap_start : STD_LOGIC;
    signal filterSingle_U0_ap_done : STD_LOGIC;
    signal filterSingle_U0_ap_continue : STD_LOGIC;
    signal filterSingle_U0_ap_idle : STD_LOGIC;
    signal filterSingle_U0_ap_ready : STD_LOGIC;
    signal filterSingle_U0_GxxStream_read : STD_LOGIC;
    signal filterSingle_U0_SxxStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal filterSingle_U0_SxxStream_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal filterSingle_1_U0_ap_start : STD_LOGIC;
    signal filterSingle_1_U0_ap_done : STD_LOGIC;
    signal filterSingle_1_U0_ap_continue : STD_LOGIC;
    signal filterSingle_1_U0_ap_idle : STD_LOGIC;
    signal filterSingle_1_U0_ap_ready : STD_LOGIC;
    signal filterSingle_1_U0_GyyStream_read : STD_LOGIC;
    signal filterSingle_1_U0_SyyStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal filterSingle_1_U0_SyyStream_write : STD_LOGIC;
    signal filterSingle_2_U0_ap_start : STD_LOGIC;
    signal filterSingle_2_U0_ap_done : STD_LOGIC;
    signal filterSingle_2_U0_ap_continue : STD_LOGIC;
    signal filterSingle_2_U0_ap_idle : STD_LOGIC;
    signal filterSingle_2_U0_ap_ready : STD_LOGIC;
    signal filterSingle_2_U0_GxyStream_read : STD_LOGIC;
    signal filterSingle_2_U0_SxyStream_din : STD_LOGIC_VECTOR (255 downto 0);
    signal filterSingle_2_U0_SxyStream_write : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_filterSingle_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_filterSingle_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_filterSingle_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_filterSingle_1_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_filterSingle_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_filterSingle_2_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component harris_filterSingle IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GxxStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        GxxStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        GxxStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        GxxStream_empty_n : IN STD_LOGIC;
        GxxStream_read : OUT STD_LOGIC;
        SxxStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        SxxStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxxStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxxStream_full_n : IN STD_LOGIC;
        SxxStream_write : OUT STD_LOGIC );
    end component;


    component harris_filterSingle_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GyyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        GyyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        GyyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        GyyStream_empty_n : IN STD_LOGIC;
        GyyStream_read : OUT STD_LOGIC;
        SyyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        SyyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SyyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SyyStream_full_n : IN STD_LOGIC;
        SyyStream_write : OUT STD_LOGIC );
    end component;


    component harris_filterSingle_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        GxyStream_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        GxyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        GxyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        GxyStream_empty_n : IN STD_LOGIC;
        GxyStream_read : OUT STD_LOGIC;
        SxyStream_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        SxyStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxyStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxyStream_full_n : IN STD_LOGIC;
        SxyStream_write : OUT STD_LOGIC );
    end component;



begin
    filterSingle_U0 : component harris_filterSingle
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => filterSingle_U0_ap_start,
        ap_done => filterSingle_U0_ap_done,
        ap_continue => filterSingle_U0_ap_continue,
        ap_idle => filterSingle_U0_ap_idle,
        ap_ready => filterSingle_U0_ap_ready,
        GxxStream_dout => GxxStream_dout,
        GxxStream_num_data_valid => ap_const_lv5_0,
        GxxStream_fifo_cap => ap_const_lv5_0,
        GxxStream_empty_n => GxxStream_empty_n,
        GxxStream_read => filterSingle_U0_GxxStream_read,
        SxxStream_din => filterSingle_U0_SxxStream_din,
        SxxStream_num_data_valid => ap_const_lv5_0,
        SxxStream_fifo_cap => ap_const_lv5_0,
        SxxStream_full_n => SxxStream_full_n,
        SxxStream_write => filterSingle_U0_SxxStream_write);

    filterSingle_1_U0 : component harris_filterSingle_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => filterSingle_1_U0_ap_start,
        ap_done => filterSingle_1_U0_ap_done,
        ap_continue => filterSingle_1_U0_ap_continue,
        ap_idle => filterSingle_1_U0_ap_idle,
        ap_ready => filterSingle_1_U0_ap_ready,
        GyyStream_dout => GyyStream_dout,
        GyyStream_num_data_valid => ap_const_lv5_0,
        GyyStream_fifo_cap => ap_const_lv5_0,
        GyyStream_empty_n => GyyStream_empty_n,
        GyyStream_read => filterSingle_1_U0_GyyStream_read,
        SyyStream_din => filterSingle_1_U0_SyyStream_din,
        SyyStream_num_data_valid => ap_const_lv5_0,
        SyyStream_fifo_cap => ap_const_lv5_0,
        SyyStream_full_n => SyyStream_full_n,
        SyyStream_write => filterSingle_1_U0_SyyStream_write);

    filterSingle_2_U0 : component harris_filterSingle_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => filterSingle_2_U0_ap_start,
        ap_done => filterSingle_2_U0_ap_done,
        ap_continue => filterSingle_2_U0_ap_continue,
        ap_idle => filterSingle_2_U0_ap_idle,
        ap_ready => filterSingle_2_U0_ap_ready,
        GxyStream_dout => GxyStream_dout,
        GxyStream_num_data_valid => ap_const_lv5_0,
        GxyStream_fifo_cap => ap_const_lv5_0,
        GxyStream_empty_n => GxyStream_empty_n,
        GxyStream_read => filterSingle_2_U0_GxyStream_read,
        SxyStream_din => filterSingle_2_U0_SxyStream_din,
        SxyStream_num_data_valid => ap_const_lv5_0,
        SxyStream_fifo_cap => ap_const_lv5_0,
        SxyStream_full_n => SxyStream_full_n,
        SxyStream_write => filterSingle_2_U0_SxyStream_write);





    ap_sync_reg_filterSingle_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_filterSingle_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_filterSingle_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_filterSingle_1_U0_ap_ready <= ap_sync_filterSingle_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_filterSingle_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_filterSingle_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_filterSingle_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_filterSingle_2_U0_ap_ready <= ap_sync_filterSingle_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_filterSingle_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_filterSingle_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_filterSingle_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_filterSingle_U0_ap_ready <= ap_sync_filterSingle_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    GxxStream_read <= filterSingle_U0_GxxStream_read;
    GxyStream_read <= filterSingle_2_U0_GxyStream_read;
    GyyStream_read <= filterSingle_1_U0_GyyStream_read;
    SxxStream_din <= filterSingle_U0_SxxStream_din;
    SxxStream_write <= filterSingle_U0_SxxStream_write;
    SxyStream_din <= filterSingle_2_U0_SxyStream_din;
    SxyStream_write <= filterSingle_2_U0_SxyStream_write;
    SyyStream_din <= filterSingle_1_U0_SyyStream_din;
    SyyStream_write <= filterSingle_1_U0_SyyStream_write;
    ap_done <= ap_sync_done;
    ap_idle <= (filterSingle_U0_ap_idle and filterSingle_2_U0_ap_idle and filterSingle_1_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (filterSingle_U0_ap_done and filterSingle_2_U0_ap_done and filterSingle_1_U0_ap_done);
    ap_sync_filterSingle_1_U0_ap_ready <= (filterSingle_1_U0_ap_ready or ap_sync_reg_filterSingle_1_U0_ap_ready);
    ap_sync_filterSingle_2_U0_ap_ready <= (filterSingle_2_U0_ap_ready or ap_sync_reg_filterSingle_2_U0_ap_ready);
    ap_sync_filterSingle_U0_ap_ready <= (filterSingle_U0_ap_ready or ap_sync_reg_filterSingle_U0_ap_ready);
    ap_sync_ready <= (ap_sync_filterSingle_U0_ap_ready and ap_sync_filterSingle_2_U0_ap_ready and ap_sync_filterSingle_1_U0_ap_ready);
    filterSingle_1_U0_ap_continue <= ap_sync_continue;
    filterSingle_1_U0_ap_start <= ((ap_sync_reg_filterSingle_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    filterSingle_2_U0_ap_continue <= ap_sync_continue;
    filterSingle_2_U0_ap_start <= ((ap_sync_reg_filterSingle_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    filterSingle_U0_ap_continue <= ap_sync_continue;
    filterSingle_U0_ap_start <= ((ap_sync_reg_filterSingle_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
